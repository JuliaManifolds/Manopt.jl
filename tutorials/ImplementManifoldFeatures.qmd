---
title: "Implement Manifold Features"
author: Ronny Bergmann
---

When you have used a few solvers from [`Manopt.jl`](https://manoptjl.org/) for example like in the opening
tutorial [üèîÔ∏è Get Started: Optimize!](https://manoptjl.org/stable/tutorials/Optimize!.html)
and also familiarized yourself with how to work with manifolds in general at
[üöÄ Get Started with `Manifolds.jl`](https://juliamanifolds.github.io/Manifolds.jl/stable/tutorials/getstarted.html),
you might come across the point that you want to
[implementing a manifold](https://juliamanifolds.github.io/ManifoldsBase.jl/stable/tutorials/implement-a-manifold/)
yourself and use it within [`Manopt.jl`](https://manoptjl.org/).
A challenge might be, which functions are necessary, since the overall interface of [`ManifoldsBase.jl`](https://juliamanifolds.github.io/ManifoldsBase.jl/stable/)
is maybe not completely necessary.

This tutorial aims to help you through these steps to implement necessary parts of a manifold
to get started with the `[solver](@ref SolversSection)`{=commonmark} you have in mind.

## Our Example Problem

We get started by loading the packages we need.

```{julia}
#| echo: false
#| code-fold: true
#| output: false
using Pkg;
cd(@__DIR__)
Pkg.activate("."); # for reproducibility use the local tutorial environment.
```

```{julia}
#| output: false
using Manifolds, ManifoldsBase, Random
using Manopt
```

We also define the same manifold as in
the [implementing a manifold](https://juliamanifolds.github.io/ManifoldsBase.jl/stable/tutorials/implement-a-manifold/)
tutorial.

```{julia}
#| output: false
"""
    ScaledSphere <: AbstractManifold{‚Ñù}

Define a sphere of fixed radius

# Fields

* `dimension` dimension of the sphere
* `radius` the radius of the sphere

# Constructor

    ScaledSphere(dimension,radius=1.0)

Initialize the manifold to a certain `dimension` and `radius`,
which by default is set to `1.0`
"""
struct ScaledSphere <: AbstractManifold{‚Ñù}
    dimension::Int
    radius::Float64
end
```

And we would like to compute a mean and/or median similar to [üèîÔ∏è Get Started: Optimize!](https://manoptjl.org/stable/tutorials/Optimize!.html),
i.e. given a set of points $q_1,\ldots,q_n$ we want to compute [Karcher:1977](@cite)

```math
  \operatorname*{arg\,min}_{p\in\mathcal M}
  \frac{1}{2n} \sum_{i=1}^n d_{\mathcal M}^2(p, q_i)
```
